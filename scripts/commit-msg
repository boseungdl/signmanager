#!/bin/sh

# -------------------------------------------------------------
# Git commit-msg 훅: 커밋 메시지 형식 검증
# -------------------------------------------------------------

# LC_ALL 환경 변수 설정 (UTF-8 문자 처리를 위해 필수)
export LC_ALL="C.UTF-8" # Git Bash 환경에 가장 적합
export LANG="C.UTF-8"

COMMIT_MSG_FILE=$1
FIRST_LINE=$(head -n1 "$COMMIT_MSG_FILE")

# --- 디버깅용: 실제 검사 대상 문자열과 길이 출력 ---
echo "--- 디버깅 정보 ---"
echo "검사할 첫 줄: '$FIRST_LINE'"
echo "첫 줄 길이: $(echo -n "$FIRST_LINE" | wc -c) 바이트"
echo "-------------------"
# ---------------------------------------------------

# awk를 사용하여 정규식 매칭을 수행합니다.
# 유연한 정규식: 타입(첫 글자 대문자), 어떤 내용이든 가능, 마지막에 (#이슈번호)
if ! echo "$FIRST_LINE" | tr -d '\r' | awk '
BEGIN {
    # 정규식 패턴을 변수로 정의:
    # ^(Feat|Fix|...) : 커밋 타입 강제 (첫 글자 대문자!)
    # (\\(.+\\))?     : 스코프 (예: (hook))는 선택 사항 (하지만 내용 자체는 자유로움)
    # .* : 콜론 이후 어떤 내용이든 허용 (주제 길이/내용 제한 없음)
    # \\(#([0-9]+)\\) : (#숫자) 형식의 이슈 번호 (필수)
    # \\r?$          : 선택적 캐리지 리턴 및 줄의 끝
    regex_pattern = "^(Feat|Fix|Chore|Docs|Style|Refactor|Test|Build|Ci|Perf|Revert)(\\(.+\\))?: .* \\(#([0-9]+)\\)\\r?$"
}
{
    if ($0 ~ regex_pattern) {
        exit 0 # 매칭 성공
    } else {
        exit 1 # 매칭 실패
    }
}
'; then
  echo ""
  echo "-------------------------------------------------------------"
  echo "❌ 오류: 유효하지 않은 커밋 메시지 형식입니다."
  echo "다음 규칙을 지켜 주세요:"
  echo ""
  echo "1. 커밋 타입의 첫 글자는 대문자여야 합니다. (예: Feat, Fix, Chore 등)"
  echo "2. 첫 줄의 가장 마지막에 이슈 번호 '(#'숫자')'를 포함해야 합니다."
  echo ""
  echo "예시:"
  echo "  Feat: 새로운 기능 추가 (#123)"
  echo "  Fix(버그): 로그인 오류 수정 (#456)"
  echo "  Chore: 빌드 스크립트 업데이트 (#789)"
  echo ""
  echo "허용되는 타입: Feat, Fix, Chore, Docs, Style, Refactor, Test, Build, Ci, Perf, Revert"
  echo "형식: <타입>(<범위, 선택>): <어떤 내용이든> (#이슈번호)"
  echo "-------------------------------------------------------------"
  echo ""
  exit 1
fi

exit 0