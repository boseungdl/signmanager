#!/bin/sh

# 커밋 메시지 파일 경로 (Git이 자동으로 첫 번째 인자로 전달)
COMMIT_MSG_FILE=$1

# 커밋 메시지 내용 읽기
COMMIT_MESSAGE=$(cat "$COMMIT_MSG_FILE")

# 첫 줄만 가져와서 검사 (커밋 메시지의 제목 부분)
FIRST_LINE=$(echo "$COMMIT_MESSAGE" | head -n1)

# 커밋 메시지 규칙 정의 (예: feat:, fix:, chore: 등으로 시작하고 뒤에 콜론과 공백, 메시지가 와야 함)
# 정규식: ^(feat|fix|chore|docs|style|refactor|test|build|ci|perf|revert)(\(.+\))?: .{1,50}$
# - ^ : 문자열의 시작
# - (feat|fix|...) : 정해진 타입 중 하나 (scope는 선택 사항)
# - (\(.+\))?: scope (괄호 안의 문자열)는 선택 사항
# - : : 타입/스코프 뒤에 콜론
# - ' ' : 콜론 뒤에 공백 하나
# - .{1,50} : 메시지 내용은 최소 1자, 최대 50자 (일반적인 컨벤션)
# - $ : 문자열의 끝

if ! echo "$FIRST_LINE" | grep -Eq "^(feat|fix|chore|docs|style|refactor|test|build|ci|perf|revert)(\(.+\))?: .{1,50}$"; then
  echo ""
  echo "❌ Error: Invalid commit message format."
  echo "Please follow the Conventional Commits specification."
  echo "Example: feat(auth): Add user login endpoint"
  echo "Example: fix: Resolve database connection issue"
  echo ""
  echo "Allowed types: feat, fix, chore, docs, style, refactor, test, build, ci, perf, revert"
  echo "Format: <type>(<scope>): <subject>"
  echo "Subject length: 1-50 characters"
  echo ""
  exit 1 # 검증 실패 시 Git 커밋을 중단
fi

exit 0 # 검증 성공 시 계속 진행